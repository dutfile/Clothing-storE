
#Signature file v4.1
#Version 

CLSS public abstract com.oracle.truffle.api.instrumentation.ExecutionEventNode
cons protected init()
meth protected final com.oracle.truffle.api.instrumentation.EventContext getInputContext(int)
meth protected final int getInputCount()
meth protected final java.lang.Object[] getSavedInputValues(com.oracle.truffle.api.frame.VirtualFrame)
meth protected final void saveInputValue(com.oracle.truffle.api.frame.VirtualFrame,int,java.lang.Object)
meth protected java.lang.Object onUnwind(com.oracle.truffle.api.frame.VirtualFrame,java.lang.Object)
meth protected void onDispose(com.oracle.truffle.api.frame.VirtualFrame)
meth protected void onEnter(com.oracle.truffle.api.frame.VirtualFrame)
meth protected void onInputValue(com.oracle.truffle.api.frame.VirtualFrame,com.oracle.truffle.api.instrumentation.EventContext,int,java.lang.Object)
meth protected void onReturnExceptional(com.oracle.truffle.api.frame.VirtualFrame,java.lang.Throwable)
meth protected void onReturnValue(com.oracle.truffle.api.frame.VirtualFrame,java.lang.Object)
supr com.oracle.truffle.api.nodes.Node

CLSS public abstract com.oracle.truffle.api.nodes.Node
cons protected init()
innr public abstract interface static !annotation Child
innr public abstract interface static !annotation Children
intf com.oracle.truffle.api.nodes.NodeInterface
intf java.lang.Cloneable
meth protected final <%0 extends com.oracle.truffle.api.TruffleLanguage> com.oracle.truffle.api.TruffleLanguage$LanguageReference<{%%0}> lookupLanguageReference(java.lang.Class<{%%0}>)
 anno 0 java.lang.Deprecated(boolean forRemoval=false, java.lang.String since="")
meth protected final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0} insert({%%0})
meth protected final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0}[] insert({%%0}[])
meth protected final <%0 extends java.lang.Object, %1 extends com.oracle.truffle.api.TruffleLanguage<{%%0}>> com.oracle.truffle.api.TruffleLanguage$ContextReference<{%%0}> lookupContextReference(java.lang.Class<{%%1}>)
 anno 0 java.lang.Deprecated(boolean forRemoval=false, java.lang.String since="")
meth protected final java.util.concurrent.locks.Lock getLock()
meth protected final void notifyInserted(com.oracle.truffle.api.nodes.Node)
meth protected final void reportPolymorphicSpecialize()
meth protected void onReplace(com.oracle.truffle.api.nodes.Node,java.lang.CharSequence)
meth public boolean isAdoptable()
meth public com.oracle.truffle.api.nodes.Node copy()
meth public com.oracle.truffle.api.nodes.Node deepCopy()
meth public com.oracle.truffle.api.nodes.NodeCost getCost()
meth public com.oracle.truffle.api.source.SourceSection getEncapsulatingSourceSection()
meth public com.oracle.truffle.api.source.SourceSection getSourceSection()
meth public final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0} replace({%%0})
meth public final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0} replace({%%0},java.lang.CharSequence)
meth public final <%0 extends java.lang.Object> {%%0} atomic(java.util.concurrent.Callable<{%%0}>)
meth public final boolean isSafelyReplaceableBy(com.oracle.truffle.api.nodes.Node)
meth public final com.oracle.truffle.api.nodes.Node getParent()
meth public final com.oracle.truffle.api.nodes.RootNode getRootNode()
meth public final java.lang.Iterable<com.oracle.truffle.api.nodes.Node> getChildren()
meth public final void accept(com.oracle.truffle.api.nodes.NodeVisitor)
meth public final void adoptChildren()
meth public final void atomic(java.lang.Runnable)
meth public java.lang.String getDescription()
meth public java.lang.String toString()
meth public java.util.Map<java.lang.String,java.lang.Object> getDebugProperties()
supr java.lang.Object
hfds GIL_LOCK,PARENT_LIMIT,parent

CLSS public abstract interface !annotation com.oracle.truffle.api.nodes.NodeInfo
 anno 0 java.lang.annotation.Inherited()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE])
intf java.lang.annotation.Annotation
meth public abstract !hasdefault com.oracle.truffle.api.nodes.NodeCost cost()
meth public abstract !hasdefault java.lang.String description()
meth public abstract !hasdefault java.lang.String language()
meth public abstract !hasdefault java.lang.String shortName()

CLSS public abstract interface com.oracle.truffle.api.nodes.NodeInterface

CLSS public com.oracle.truffle.tools.coverage.CountingCoverageNode
meth protected void onEnter(com.oracle.truffle.api.frame.VirtualFrame)
supr com.oracle.truffle.api.instrumentation.ExecutionEventNode
hfds count

CLSS public final com.oracle.truffle.tools.coverage.CoverageTracker
innr public static Config
intf java.lang.AutoCloseable
meth public com.oracle.truffle.tools.coverage.SourceCoverage[] getCoverage()
meth public com.oracle.truffle.tools.coverage.SourceCoverage[] resetCoverage()
meth public void close()
meth public void end()
meth public void start(com.oracle.truffle.tools.coverage.CoverageTracker$Config)
supr java.lang.Object
hfds DEFAULT_FILTER,closed,coverageNodes,coveredBinding,env,loadedRoots,loadedRootsBinding,loadedStatementBinding,loadedStatements,noReset,tracking
hcls RootData

CLSS public static com.oracle.truffle.tools.coverage.CoverageTracker$Config
 outer com.oracle.truffle.tools.coverage.CoverageTracker
cons public init(com.oracle.truffle.api.instrumentation.SourceSectionFilter,boolean)
supr java.lang.Object
hfds count,sourceSectionFilter

CLSS public final com.oracle.truffle.tools.coverage.RootCoverage
meth public boolean isCovered()
meth public com.oracle.truffle.api.source.SourceSection getSourceSection()
meth public com.oracle.truffle.tools.coverage.SectionCoverage[] getSectionCoverage()
meth public java.lang.String getName()
meth public long getCount()
supr java.lang.Object
hfds count,covered,name,sectionCoverage,sourceSection

CLSS public final com.oracle.truffle.tools.coverage.SectionCoverage
meth public boolean isCovered()
meth public com.oracle.truffle.api.source.SourceSection getSourceSection()
meth public long getCount()
supr java.lang.Object
hfds count,covered,sourceSection

CLSS public final com.oracle.truffle.tools.coverage.SourceCoverage
meth public com.oracle.truffle.api.source.Source getSource()
meth public com.oracle.truffle.tools.coverage.RootCoverage[] getRoots()
supr java.lang.Object
hfds roots,source

CLSS public abstract interface java.lang.AutoCloseable
meth public abstract void close() throws java.lang.Exception

CLSS public abstract interface java.lang.Cloneable

CLSS public java.lang.Object
cons public init()
meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
meth protected void finalize() throws java.lang.Throwable
 anno 0 java.lang.Deprecated(boolean forRemoval=false, java.lang.String since="9")
meth public boolean equals(java.lang.Object)
meth public final java.lang.Class<?> getClass()
meth public final void notify()
meth public final void notifyAll()
meth public final void wait() throws java.lang.InterruptedException
meth public final void wait(long) throws java.lang.InterruptedException
meth public final void wait(long,int) throws java.lang.InterruptedException
meth public int hashCode()
meth public java.lang.String toString()

CLSS public abstract interface java.lang.annotation.Annotation
meth public abstract boolean equals(java.lang.Object)
meth public abstract int hashCode()
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> annotationType()
meth public abstract java.lang.String toString()

CLSS public abstract interface !annotation java.lang.annotation.Documented
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation java.lang.annotation.Inherited
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation java.lang.annotation.Retention
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract java.lang.annotation.RetentionPolicy value()

CLSS public abstract interface !annotation java.lang.annotation.Target
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract java.lang.annotation.ElementType[] value()
