
#Signature file v4.1
#Version 

CLSS public abstract interface !annotation com.oracle.truffle.api.library.GenerateLibrary
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[TYPE])
innr public abstract interface static !annotation Abstract
innr public abstract interface static !annotation DefaultExport
intf java.lang.annotation.Annotation
meth public abstract !hasdefault boolean defaultExportLookupEnabled()
meth public abstract !hasdefault boolean dynamicDispatchEnabled()
meth public abstract !hasdefault boolean pushEncapsulatingNode()
meth public abstract !hasdefault java.lang.Class<? extends com.oracle.truffle.api.library.Library> assertions()
meth public abstract !hasdefault java.lang.Class<?> receiverType()

CLSS public abstract com.oracle.truffle.api.library.Library
cons protected init()
meth public abstract boolean accepts(java.lang.Object)
supr com.oracle.truffle.api.nodes.Node

CLSS public abstract com.oracle.truffle.api.nodes.Node
cons protected init()
innr public abstract interface static !annotation Child
innr public abstract interface static !annotation Children
intf com.oracle.truffle.api.nodes.NodeInterface
intf java.lang.Cloneable
meth protected final <%0 extends com.oracle.truffle.api.TruffleLanguage> com.oracle.truffle.api.TruffleLanguage$LanguageReference<{%%0}> lookupLanguageReference(java.lang.Class<{%%0}>)
 anno 0 java.lang.Deprecated(boolean forRemoval=false, java.lang.String since="")
meth protected final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0} insert({%%0})
meth protected final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0}[] insert({%%0}[])
meth protected final <%0 extends java.lang.Object, %1 extends com.oracle.truffle.api.TruffleLanguage<{%%0}>> com.oracle.truffle.api.TruffleLanguage$ContextReference<{%%0}> lookupContextReference(java.lang.Class<{%%1}>)
 anno 0 java.lang.Deprecated(boolean forRemoval=false, java.lang.String since="")
meth protected final java.util.concurrent.locks.Lock getLock()
meth protected final void notifyInserted(com.oracle.truffle.api.nodes.Node)
meth protected final void reportPolymorphicSpecialize()
meth protected void onReplace(com.oracle.truffle.api.nodes.Node,java.lang.CharSequence)
meth public boolean isAdoptable()
meth public com.oracle.truffle.api.nodes.Node copy()
meth public com.oracle.truffle.api.nodes.Node deepCopy()
meth public com.oracle.truffle.api.nodes.NodeCost getCost()
meth public com.oracle.truffle.api.source.SourceSection getEncapsulatingSourceSection()
meth public com.oracle.truffle.api.source.SourceSection getSourceSection()
meth public final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0} replace({%%0})
meth public final <%0 extends com.oracle.truffle.api.nodes.Node> {%%0} replace({%%0},java.lang.CharSequence)
meth public final <%0 extends java.lang.Object> {%%0} atomic(java.util.concurrent.Callable<{%%0}>)
meth public final boolean isSafelyReplaceableBy(com.oracle.truffle.api.nodes.Node)
meth public final com.oracle.truffle.api.nodes.Node getParent()
meth public final com.oracle.truffle.api.nodes.RootNode getRootNode()
meth public final java.lang.Iterable<com.oracle.truffle.api.nodes.Node> getChildren()
meth public final void accept(com.oracle.truffle.api.nodes.NodeVisitor)
meth public final void adoptChildren()
meth public final void atomic(java.lang.Runnable)
meth public java.lang.String getDescription()
meth public java.lang.String toString()
meth public java.util.Map<java.lang.String,java.lang.Object> getDebugProperties()
supr java.lang.Object
hfds GIL_LOCK,PARENT_LIMIT,parent

CLSS public abstract interface com.oracle.truffle.api.nodes.NodeInterface

CLSS public abstract interface java.lang.Cloneable

CLSS public java.lang.Object
cons public init()
meth protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
meth protected void finalize() throws java.lang.Throwable
 anno 0 java.lang.Deprecated(boolean forRemoval=false, java.lang.String since="9")
meth public boolean equals(java.lang.Object)
meth public final java.lang.Class<?> getClass()
meth public final void notify()
meth public final void notifyAll()
meth public final void wait() throws java.lang.InterruptedException
meth public final void wait(long) throws java.lang.InterruptedException
meth public final void wait(long,int) throws java.lang.InterruptedException
meth public int hashCode()
meth public java.lang.String toString()

CLSS public abstract interface java.lang.annotation.Annotation
meth public abstract boolean equals(java.lang.Object)
meth public abstract int hashCode()
meth public abstract java.lang.Class<? extends java.lang.annotation.Annotation> annotationType()
meth public abstract java.lang.String toString()

CLSS public abstract interface !annotation java.lang.annotation.Documented
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation

CLSS public abstract interface !annotation java.lang.annotation.Retention
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract java.lang.annotation.RetentionPolicy value()

CLSS public abstract interface !annotation java.lang.annotation.Target
 anno 0 java.lang.annotation.Documented()
 anno 0 java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy value=RUNTIME)
 anno 0 java.lang.annotation.Target(java.lang.annotation.ElementType[] value=[ANNOTATION_TYPE])
intf java.lang.annotation.Annotation
meth public abstract java.lang.annotation.ElementType[] value()

CLSS public abstract interface org.graalvm.tools.api.lsp.LSPCommand
meth public abstract java.lang.Object execute(org.graalvm.tools.api.lsp.LSPServerAccessor,com.oracle.truffle.api.instrumentation.TruffleInstrument$Env,java.util.List<java.lang.Object>)
meth public abstract java.lang.String getName()
meth public int getTimeoutMillis()
meth public java.lang.Object onTimeout(java.util.List<java.lang.Object>)

CLSS public abstract interface org.graalvm.tools.api.lsp.LSPExtension
meth public abstract java.util.List<org.graalvm.tools.api.lsp.LSPCommand> getCommands()

CLSS public abstract org.graalvm.tools.api.lsp.LSPLibrary
meth public java.lang.Object getDocumentation(java.lang.Object) throws com.oracle.truffle.api.interop.UnsupportedMessageException
meth public java.lang.Object getSignature(java.lang.Object) throws com.oracle.truffle.api.interop.UnsupportedMessageException
meth public static com.oracle.truffle.api.library.LibraryFactory<org.graalvm.tools.api.lsp.LSPLibrary> getFactory()
supr com.oracle.truffle.api.library.Library
hfds FACTORY
hcls Asserts

CLSS public abstract interface org.graalvm.tools.api.lsp.LSPServerAccessor
meth public abstract com.oracle.truffle.api.source.Source getSource(java.net.URI)
meth public abstract java.util.Map<java.net.URI,java.lang.String> getOpenFileURI2LangId()
meth public abstract void sendCustomNotification(java.lang.String,java.lang.Object)
